{"mappings":"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","sources":["<anon>","src/scripts/main.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/* eslint-disable function-paren-newline */ /* eslint-disable no-console */ /* eslint-disable no-shadow */ function $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\nvar $3d28d7f1aac198f5$exports = {};\n/* eslint-disable prettier/prettier */ function $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.boardSize = 4; // Fixed 4x4 grid\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\"; // Possible values: 'idle', 'playing', 'win', 'lose'\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"createEmptyBoard\",\n            value: function createEmptyBoard() {\n                var _this = this;\n                return Array(this.boardSize).fill().map(function() {\n                    return Array(_this.boardSize).fill(0);\n                });\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.board = this.createEmptyBoard();\n                this.score = 0;\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.start();\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var r = 0; r < this.boardSize; r++){\n                    for(var c = 0; c < this.boardSize; c++)if (this.board[r][c] === 0) emptyCells.push([\n                        r,\n                        c\n                    ]);\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[Math.floor(Math.random() * emptyCells.length)], 2), row = _emptyCells_Math_floor[0], col = _emptyCells_Math_floor[1];\n                    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"slide\",\n            value: function slide(row) {\n                var filteredRow = row.filter(function(num) {\n                    return num !== 0;\n                }); // Remove all zeros\n                var newRow = [];\n                while(filteredRow.length > 0)if (filteredRow.length > 1 && filteredRow[0] === filteredRow[1]) {\n                    newRow.push(filteredRow[0] * 2);\n                    this.score += filteredRow[0] * 2;\n                    filteredRow.splice(0, 2); // Remove the merged cells\n                } else {\n                    newRow.push(filteredRow[0]);\n                    filteredRow.splice(0, 1);\n                }\n                while(newRow.length < this.boardSize)newRow.push(0);\n                 // Fill with zeros\n                return newRow;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                var oldBoard = JSON.stringify(this.board);\n                this.board = this.board.map(function(row) {\n                    return _this.slide(row);\n                });\n                if (JSON.stringify(this.board) !== oldBoard) {\n                    this.addRandomTile();\n                    this.checkGameState();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                var oldBoard = JSON.stringify(this.board);\n                this.board = this.board.map(function(row) {\n                    return _this.slide(row.reverse()).reverse();\n                });\n                if (JSON.stringify(this.board) !== oldBoard) {\n                    this.addRandomTile();\n                    this.checkGameState();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.transposeBoard();\n                this.moveLeft();\n                this.transposeBoard();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.transposeBoard();\n                this.moveRight();\n                this.transposeBoard();\n            }\n        },\n        {\n            key: \"transposeBoard\",\n            value: function transposeBoard() {\n                var _this = this;\n                this.board = this.board[0].map(function(_, colIndex) {\n                    return _this.board.map(function(row) {\n                        return row[colIndex];\n                    });\n                });\n            }\n        },\n        {\n            key: \"checkGameState\",\n            value: function checkGameState() {\n                if (this.board.flat().includes(2048)) this.status = \"win\";\n                else if (!this.canMove()) this.status = \"lose\";\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                // Check for empty cells\n                if (this.board.flat().includes(0)) return true;\n                // Check for possible merges\n                for(var r = 0; r < this.boardSize; r++)for(var c = 0; c < this.boardSize - 1; c++){\n                    if (this.board[r][c] === this.board[r][c + 1]) return true;\n                }\n                for(var c1 = 0; c1 < this.boardSize; c1++)for(var r1 = 0; r1 < this.boardSize - 1; r1++){\n                    if (this.board[r1][c1] === this.board[r1 + 1][c1]) return true;\n                }\n                return false;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\n\"use strict\";\nvar $197cd56b15c33885$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports)))();\nvar $197cd56b15c33885$var$field = document.querySelector(\".game-field\");\nvar $197cd56b15c33885$var$scoreDisplay = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$startButton = document.querySelector(\"#ButtonStart\");\nvar $197cd56b15c33885$var$messages = {\n    start: document.querySelector(\".message-start\"),\n    win: document.querySelector(\".message-win\"),\n    lose: document.querySelector(\".message-lose\")\n};\nfunction $197cd56b15c33885$var$renderBoard() {\n    var state = $197cd56b15c33885$var$game.getState();\n    $197cd56b15c33885$var$field.querySelectorAll(\".field-cell\").forEach(function(cell) {\n        var _cell_dataset_position_split_map = (0, $efec029548ccee7f$export$71511d61b312f219)(cell.dataset.position.split(\"-\").map(Number), 2), row = _cell_dataset_position_split_map[0], col = _cell_dataset_position_split_map[1];\n        var value = state[row][col];\n        cell.textContent = value > 0 ? value : \"\";\n        cell.className = \"field-cell \".concat(value > 0 ? \"field-cell--\".concat(value) : \"\");\n    });\n    $197cd56b15c33885$var$scoreDisplay.textContent = $197cd56b15c33885$var$game.getScore();\n}\nfunction $197cd56b15c33885$var$showMessage(type) {\n    Object.values($197cd56b15c33885$var$messages).forEach(function(msg) {\n        return msg.classList.add(\"hidden\");\n    });\n    $197cd56b15c33885$var$messages[type].classList.remove(\"hidden\");\n}\nfunction $197cd56b15c33885$var$handleMove(key) {\n    if ($197cd56b15c33885$var$game.getStatus() !== \"playing\") return;\n    if (key === \"ArrowLeft\") $197cd56b15c33885$var$game.moveLeft();\n    if (key === \"ArrowRight\") $197cd56b15c33885$var$game.moveRight();\n    if (key === \"ArrowUp\") $197cd56b15c33885$var$game.moveUp();\n    if (key === \"ArrowDown\") $197cd56b15c33885$var$game.moveDown();\n    $197cd56b15c33885$var$renderBoard();\n    if ($197cd56b15c33885$var$game.getStatus() === \"win\") $197cd56b15c33885$var$showMessage(\"win\");\n    if ($197cd56b15c33885$var$game.getStatus() === \"lose\") $197cd56b15c33885$var$showMessage(\"lose\");\n}\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$renderBoard();\n    $197cd56b15c33885$var$showMessage(\"\");\n    $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n});\ndocument.addEventListener(\"keydown\", function(event) {\n    return $197cd56b15c33885$var$handleMove(event.key);\n});\n\n})();\n//# sourceMappingURL=index.ac8e5a3b.js.map\n","/* eslint-disable function-paren-newline */\n/* eslint-disable no-console */\n/* eslint-disable no-shadow */\n'use strict';\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\nconst field = document.querySelector('.game-field');\nconst scoreDisplay = document.querySelector('.game-score');\nconst startButton = document.querySelector('#ButtonStart');\nconst messages = {\n  start: document.querySelector('.message-start'),\n  win: document.querySelector('.message-win'),\n  lose: document.querySelector('.message-lose'),\n};\n\nfunction renderBoard() {\n  const state = game.getState();\n\n  field.querySelectorAll('.field-cell').forEach((cell) => {\n    const [row, col] = cell.dataset.position.split('-').map(Number);\n    const value = state[row][col];\n\n    cell.textContent = value > 0 ? value : '';\n    cell.className = `field-cell ${value > 0 ? `field-cell--${value}` : ''}`;\n  });\n  scoreDisplay.textContent = game.getScore();\n}\n\nfunction showMessage(type) {\n  Object.values(messages).forEach((msg) => msg.classList.add('hidden'));\n  messages[type].classList.remove('hidden');\n}\n\nfunction handleMove(key) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  if (key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (key === 'ArrowDown') {\n    game.moveDown();\n  }\n  renderBoard();\n\n  if (game.getStatus() === 'win') {\n    showMessage('win');\n  }\n\n  if (game.getStatus() === 'lose') {\n    showMessage('lose');\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  game.start();\n  renderBoard();\n  showMessage('');\n  startButton.textContent = 'Restart';\n});\n\ndocument.addEventListener('keydown', (event) => handleMove(event.key));\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","/* eslint-disable prettier/prettier */\n'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  constructor(initialState = null) {\n    this.boardSize = 4; // Fixed 4x4 grid\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle'; // Possible values: 'idle', 'playing', 'win', 'lose'\n  }\n\n  createEmptyBoard() {\n    return Array(this.boardSize)\n      .fill()\n      .map(() => Array(this.boardSize).fill(0));\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.start();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let r = 0; r < this.boardSize; r++) {\n      for (let c = 0; c < this.boardSize; c++) {\n        if (this.board[r][c] === 0) {\n          emptyCells.push([r, c]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [row, col] =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  slide(row) {\n    const filteredRow = row.filter((num) => num !== 0); // Remove all zeros\n    const newRow = [];\n\n    while (filteredRow.length > 0) {\n      if (filteredRow.length > 1 && filteredRow[0] === filteredRow[1]) {\n        newRow.push(filteredRow[0] * 2);\n        this.score += filteredRow[0] * 2;\n        filteredRow.splice(0, 2); // Remove the merged cells\n      } else {\n        newRow.push(filteredRow[0]);\n        filteredRow.splice(0, 1);\n      }\n    }\n\n    while (newRow.length < this.boardSize) {\n      newRow.push(0);\n    } // Fill with zeros\n\n    return newRow;\n  }\n\n  moveLeft() {\n    const oldBoard = JSON.stringify(this.board);\n\n    this.board = this.board.map((row) => this.slide(row));\n\n    if (JSON.stringify(this.board) !== oldBoard) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  moveRight() {\n    const oldBoard = JSON.stringify(this.board);\n\n    this.board = this.board.map((row) => this.slide(row.reverse()).reverse());\n\n    if (JSON.stringify(this.board) !== oldBoard) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  moveUp() {\n    this.transposeBoard();\n    this.moveLeft();\n    this.transposeBoard();\n  }\n\n  moveDown() {\n    this.transposeBoard();\n    this.moveRight();\n    this.transposeBoard();\n  }\n\n  transposeBoard() {\n    this.board = this.board[0].map((_, colIndex) =>\n      this.board.map((row) => row[colIndex]));\n  }\n\n  checkGameState() {\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n    } else if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  canMove() {\n    // Check for empty cells\n    if (this.board.flat().includes(0)) {\n      return true;\n    }\n\n    // Check for possible merges\n    for (let r = 0; r < this.boardSize; r++) {\n      for (let c = 0; c < this.boardSize - 1; c++) {\n        if (this.board[r][c] === this.board[r][c + 1]) {\n          return true;\n        }\n      }\n    }\n\n    for (let c = 0; c < this.boardSize; c++) {\n      for (let r = 0; r < this.boardSize - 1; r++) {\n        if (this.board[r][c] === this.board[r + 1][c]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$efec029548ccee7f$export$71511d61b312f219","isArray","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","push","value","err","o","minLen","n","Object","prototype","toString","slice","constructor","name","from","test","TypeError","a","$3d28d7f1aac198f5$exports","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","boardSize","board","createEmptyBoard","score","status","key","_this","fill","map","addRandomTile","start","emptyCells","r","c","_emptyCells_Math_floor","Math","floor","random","row","col","filteredRow","filter","num","newRow","splice","oldBoard","JSON","stringify","slide","checkGameState","reverse","transposeBoard","moveLeft","moveRight","_","colIndex","flat","includes","canMove","c1","r1","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","__esModule","default","$197cd56b15c33885$var$field","document","querySelector","$197cd56b15c33885$var$scoreDisplay","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$messages","win","lose","$197cd56b15c33885$var$renderBoard","state","getState","querySelectorAll","forEach","cell","_cell_dataset_position_split_map","dataset","position","split","Number","textContent","className","concat","getScore","$197cd56b15c33885$var$showMessage","type","values","msg","classList","add","remove","addEventListener","event","getStatus","moveUp","moveDown"],"version":3,"file":"index.ac8e5a3b.js.map"}