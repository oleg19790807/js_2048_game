{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/* eslint-disable function-paren-newline */ /* eslint-disable no-console */ /* eslint-disable no-shadow */ var $a5fd07fa01589658$exports = {};\n/* eslint-disable prettier/prettier */ \"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    constructor(initialState = null){\n        this.boardSize = 4; // Fixed 4x4 grid\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\"; // Possible values: 'idle', 'playing', 'win', 'lose'\n    }\n    createEmptyBoard() {\n        return Array(this.boardSize).fill().map(()=>Array(this.boardSize).fill(0));\n    }\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    restart() {\n        this.start();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let r = 0; r < this.boardSize; r++){\n            for(let c = 0; c < this.boardSize; c++)if (this.board[r][c] === 0) emptyCells.push([\n                r,\n                c\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    slide(row) {\n        const filteredRow = row.filter((num)=>num !== 0); // Remove all zeros\n        const newRow = [];\n        while(filteredRow.length > 0)if (filteredRow.length > 1 && filteredRow[0] === filteredRow[1]) {\n            newRow.push(filteredRow[0] * 2);\n            this.score += filteredRow[0] * 2;\n            filteredRow.splice(0, 2); // Remove the merged cells\n        } else {\n            newRow.push(filteredRow[0]);\n            filteredRow.splice(0, 1);\n        }\n        while(newRow.length < this.boardSize)newRow.push(0);\n         // Fill with zeros\n        return newRow;\n    }\n    moveLeft() {\n        const oldBoard = JSON.stringify(this.board);\n        this.board = this.board.map((row)=>this.slide(row));\n        if (JSON.stringify(this.board) !== oldBoard) {\n            this.addRandomTile();\n            this.checkGameState();\n        }\n    }\n    moveRight() {\n        const oldBoard = JSON.stringify(this.board);\n        this.board = this.board.map((row)=>this.slide(row.reverse()).reverse());\n        if (JSON.stringify(this.board) !== oldBoard) {\n            this.addRandomTile();\n            this.checkGameState();\n        }\n    }\n    moveUp() {\n        this.transposeBoard();\n        this.moveLeft();\n        this.transposeBoard();\n    }\n    moveDown() {\n        this.transposeBoard();\n        this.moveRight();\n        this.transposeBoard();\n    }\n    transposeBoard() {\n        this.board = this.board[0].map((_, colIndex)=>this.board.map((row)=>row[colIndex]));\n    }\n    checkGameState() {\n        if (this.board.flat().includes(2048)) this.status = \"win\";\n        else if (!this.canMove()) this.status = \"lose\";\n    }\n    canMove() {\n        // Check for empty cells\n        if (this.board.flat().includes(0)) return true;\n        // Check for possible merges\n        for(let r = 0; r < this.boardSize; r++)for(let c = 0; c < this.boardSize - 1; c++){\n            if (this.board[r][c] === this.board[r][c + 1]) return true;\n        }\n        for(let c = 0; c < this.boardSize; c++)for(let r = 0; r < this.boardSize - 1; r++){\n            if (this.board[r][c] === this.board[r + 1][c]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$field = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$scoreDisplay = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\"#ButtonStart\");\nconst $09e991522ca7e64e$var$messages = {\n    start: document.querySelector(\".message-start\"),\n    win: document.querySelector(\".message-win\"),\n    lose: document.querySelector(\".message-lose\")\n};\nfunction $09e991522ca7e64e$var$renderBoard() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$field.querySelectorAll(\".field-cell\").forEach((cell)=>{\n        const [row, col] = cell.dataset.position.split(\"-\").map(Number);\n        const value = state[row][col];\n        cell.textContent = value > 0 ? value : \"\";\n        cell.className = `field-cell ${value > 0 ? `field-cell--${value}` : \"\"}`;\n    });\n    $09e991522ca7e64e$var$scoreDisplay.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$showMessage(type) {\n    Object.values($09e991522ca7e64e$var$messages).forEach((msg)=>msg.classList.add(\"hidden\"));\n    $09e991522ca7e64e$var$messages[type].classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$handleMove(key) {\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    if (key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n    if (key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n    if (key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n    if (key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n    $09e991522ca7e64e$var$renderBoard();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$showMessage(\"win\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$showMessage(\"lose\");\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$renderBoard();\n    $09e991522ca7e64e$var$showMessage(\"\");\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n});\ndocument.addEventListener(\"keydown\", (event)=>$09e991522ca7e64e$var$handleMove(event.key));\n\n\n//# sourceMappingURL=index.359199cf.js.map\n","/* eslint-disable function-paren-newline */\n/* eslint-disable no-console */\n/* eslint-disable no-shadow */\n'use strict';\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\nconst field = document.querySelector('.game-field');\nconst scoreDisplay = document.querySelector('.game-score');\nconst startButton = document.querySelector('#ButtonStart');\nconst messages = {\n  start: document.querySelector('.message-start'),\n  win: document.querySelector('.message-win'),\n  lose: document.querySelector('.message-lose'),\n};\n\nfunction renderBoard() {\n  const state = game.getState();\n\n  field.querySelectorAll('.field-cell').forEach((cell) => {\n    const [row, col] = cell.dataset.position.split('-').map(Number);\n    const value = state[row][col];\n\n    cell.textContent = value > 0 ? value : '';\n    cell.className = `field-cell ${value > 0 ? `field-cell--${value}` : ''}`;\n  });\n  scoreDisplay.textContent = game.getScore();\n}\n\nfunction showMessage(type) {\n  Object.values(messages).forEach((msg) => msg.classList.add('hidden'));\n  messages[type].classList.remove('hidden');\n}\n\nfunction handleMove(key) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  if (key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (key === 'ArrowDown') {\n    game.moveDown();\n  }\n  renderBoard();\n\n  if (game.getStatus() === 'win') {\n    showMessage('win');\n  }\n\n  if (game.getStatus() === 'lose') {\n    showMessage('lose');\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  game.start();\n  renderBoard();\n  showMessage('');\n  startButton.textContent = 'Restart';\n});\n\ndocument.addEventListener('keydown', (event) => handleMove(event.key));\n","/* eslint-disable prettier/prettier */\n'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  constructor(initialState = null) {\n    this.boardSize = 4; // Fixed 4x4 grid\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle'; // Possible values: 'idle', 'playing', 'win', 'lose'\n  }\n\n  createEmptyBoard() {\n    return Array(this.boardSize)\n      .fill()\n      .map(() => Array(this.boardSize).fill(0));\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.start();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let r = 0; r < this.boardSize; r++) {\n      for (let c = 0; c < this.boardSize; c++) {\n        if (this.board[r][c] === 0) {\n          emptyCells.push([r, c]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [row, col] =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  slide(row) {\n    const filteredRow = row.filter((num) => num !== 0); // Remove all zeros\n    const newRow = [];\n\n    while (filteredRow.length > 0) {\n      if (filteredRow.length > 1 && filteredRow[0] === filteredRow[1]) {\n        newRow.push(filteredRow[0] * 2);\n        this.score += filteredRow[0] * 2;\n        filteredRow.splice(0, 2); // Remove the merged cells\n      } else {\n        newRow.push(filteredRow[0]);\n        filteredRow.splice(0, 1);\n      }\n    }\n\n    while (newRow.length < this.boardSize) {\n      newRow.push(0);\n    } // Fill with zeros\n\n    return newRow;\n  }\n\n  moveLeft() {\n    const oldBoard = JSON.stringify(this.board);\n\n    this.board = this.board.map((row) => this.slide(row));\n\n    if (JSON.stringify(this.board) !== oldBoard) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  moveRight() {\n    const oldBoard = JSON.stringify(this.board);\n\n    this.board = this.board.map((row) => this.slide(row.reverse()).reverse());\n\n    if (JSON.stringify(this.board) !== oldBoard) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  moveUp() {\n    this.transposeBoard();\n    this.moveLeft();\n    this.transposeBoard();\n  }\n\n  moveDown() {\n    this.transposeBoard();\n    this.moveRight();\n    this.transposeBoard();\n  }\n\n  transposeBoard() {\n    this.board = this.board[0].map((_, colIndex) =>\n      this.board.map((row) => row[colIndex]));\n  }\n\n  checkGameState() {\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n    } else if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  canMove() {\n    // Check for empty cells\n    if (this.board.flat().includes(0)) {\n      return true;\n    }\n\n    // Check for possible merges\n    for (let r = 0; r < this.boardSize; r++) {\n      for (let c = 0; c < this.boardSize - 1; c++) {\n        if (this.board[r][c] === this.board[r][c + 1]) {\n          return true;\n        }\n      }\n    }\n\n    for (let c = 0; c < this.boardSize; c++) {\n      for (let r = 0; r < this.boardSize - 1; r++) {\n        if (this.board[r][c] === this.board[r + 1][c]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["a","$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","initialState","boardSize","board","createEmptyBoard","score","status","Array","fill","map","getState","getScore","getStatus","start","addRandomTile","restart","emptyCells","r","c","push","length","row","col","Math","floor","random","slide","filteredRow","filter","num","newRow","splice","moveLeft","oldBoard","JSON","stringify","checkGameState","moveRight","reverse","moveUp","transposeBoard","moveDown","_","colIndex","flat","includes","canMove","__esModule","default","$09e991522ca7e64e$var$field","document","querySelector","$09e991522ca7e64e$var$scoreDisplay","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$messages","win","lose","$09e991522ca7e64e$var$renderBoard","state","querySelectorAll","forEach","cell","dataset","position","split","Number","value","textContent","className","$09e991522ca7e64e$var$showMessage","type","Object","values","msg","classList","add","remove","addEventListener","event","key"],"version":3,"file":"index.359199cf.js.map"}